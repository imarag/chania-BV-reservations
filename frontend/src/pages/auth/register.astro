---
import Layout from "../../layouts/Layout.astro";
import RegisterForm from "../../components/features/astro/RegisterForm.astro";
import { AppUrls } from "../../utils/enumerators";
import { getUserByEmail } from "../../utils/db-utils";
import { createUser } from "../../utils/db-utils";
import { validate_password, validate_email } from "../../utils/validation";
import { delay } from "../../utils/generic";

let error = "";
let formInfo = {
  email: "",
  password: "",
  "password-confirm": "",
};
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();

  formInfo.password = formData.get("password")?.toString().trim() ?? null;
  formInfo["password-confirm"] =
    formData.get("password-confirm")?.toString().trim() ?? null;
  formInfo.email = formData.get("email")?.toString().trim() ?? null;

  try {
    if (
      !formInfo.email ||
      !formInfo.password ||
      !formInfo["password-confirm"]
    ) {
      throw new Error("Missing required fields");
    }

    if (!validate_email(formInfo.email)) {
      throw new Error("Invalid email format");
    }

    const res_validate_pass = validate_password(formInfo.password);
    if (!res_validate_pass.isValid) {
      throw new Error(res_validate_pass.error);
    }

    if (formInfo.password !== formInfo["password-confirm"]) {
      throw new Error("Passwords do not match");
    }

    const existingUser = await getUserByEmail(formInfo.email);

    if (existingUser) {
      throw new Error("Email is already registered");
    }

    const newUser = {
      email: formInfo.email,
      password: formInfo.password,
    };
    await createUser(newUser);

    await delay(1500);

    return Astro.redirect(AppUrls.LoginPage);
  } catch (err) {
    console.error("Register error:", err);
    error = err.message || "Unknown error occurred";
  }
}
---

<Layout>
  <RegisterForm error={error} formInfo={formInfo} />
</Layout>
